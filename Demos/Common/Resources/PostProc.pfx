[HEADER]
	VERSION		01.00.00.00
	DESCRIPTION Post-processing examples
	COPYRIGHT	2013, The Brenwill Workshop Ltd. All rights reserved.
[/HEADER]

// Using a texture attached to a rendering surface
[TEXTURES] 
[/TEXTURES]

///////////////////////////////////////////////
// In post-processing, draw a single texture in clip-space.
// after converting the texture to grayscale.
///////////////////////////////////////////////
[EFFECT]
	NAME			Grayscale
 
	VERTEXSHADER	ClipSpace_vsh
	FRAGMENTSHADER	Grayscale_fsh
[/EFFECT]
 
///////////////////////////////////////////////
// In post-processing, draw a single texture in clip-space. after
// converting the texture from integer depth value to a color.
///////////////////////////////////////////////
[EFFECT]
	NAME			Depth
 
	VERTEXSHADER	ClipSpace_vsh
	FRAGMENTSHADER	Depth_fsh
[/EFFECT]

///////////////////////////////////////////////
// Draws a single texture in clip-space.
// In clip-space, we need no transform matrices, because all locations
// are taken to be between +/-1.0 in all three dimensions.
///////////////////////////////////////////////
[VERTEXSHADER]
	NAME 		ClipSpace_vsh

	[GLSL_CODE]
		precision mediump float;
 
		attribute vec4 a_cc3Position;
		attribute vec2 a_cc3TexCoord;
	
		varying lowp vec2 vTexCoord;
 
		void main(void) {
			gl_Position = a_cc3Position;
			vTexCoord	= a_cc3TexCoord;
		}
	[/GLSL_CODE]
[/VERTEXSHADER]

///////////////////////////////////////////////
// Draws a single texture as grayscale.
// Grayscale rendering is processed via the ITU-R BT.709 conversion used for
// high-definition television (HDTV) signals. The alpha component is unchanged.
///////////////////////////////////////////////
[FRAGMENTSHADER]
	NAME 		Grayscale_fsh

	[GLSL_CODE]
		precision mediump float;
	
		varying lowp vec2 vTexCoord;
	
		uniform sampler2D s_cc3Texture2D;
 
		void main (void) {
			vec4 texColor = texture2D(s_cc3Texture2D, vTexCoord);
			float luma = (0.2126 * texColor.r) + (0.7152 * texColor.g) + (0.0722 * texColor.b);
			gl_FragColor = vec4(luma, luma, luma, texColor.a);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
///////////////////////////////////////////////
// Draws a single texture, containing depth-buffer values, as grayscale.
// The content in the depth buffer is not linear, so the value of each fragment is
// linearized relative to the near and far clip distances of the camera's frustum,
// whose values are available as standard uniforms.
///////////////////////////////////////////////
[FRAGMENTSHADER]
	NAME 		Depth_fsh
 
	[GLSL_CODE]
		 precision mediump float;
		 
		 varying lowp vec2 vTexCoord;
		 
		 uniform vec4 u_cc3CameraFrustum;
		 uniform sampler2D s_cc3Texture2D;
		 
		// Linearizes the depth value retrieved from the texture using the camera frustum
		// clip distances. The far distance is clamped to a reasonable maxium in the case
		// of the infinite projection used during shadowing.
		float LinearizeDepth(float z){
			float n = u_cc3CameraFrustum[2];				// Camera near clip distance
			float f = min(u_cc3CameraFrustum[3], 4000.0);	// Camera far clip distance
			return (2.0 * n) / (f + n - (z * (f - n)));
		}

		 void main (void) {
			vec4 texColor = texture2D(s_cc3Texture2D, vTexCoord);
			float luma = LinearizeDepth(texColor.r);
			gl_FragColor = vec4(luma, luma, luma, 1.0);
		}
	[/GLSL_CODE]
[/FRAGMENTSHADER]
 
